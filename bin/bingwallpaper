#!/usr/bin/env ruby
#-*- mode: enh-ruby;-*-

#
# Sets the desktop wallpaper to the current "image of the day" from the Bing
# search engine.
#
require "bingwallpaper"
require "logger"
require "optparse"
require "yaml"

# setup a logger
logger = Logger.new(STDERR)
logger.formatter = proc do |severity, time, progname, msg|
  "%-6s %s\n" % [severity, msg]
end

# parse out our command-line options
options = {}

OptionParser.new do |opts|
  opts.banner = "Usage: bingwallpaper [options]"

  opts.on("-d", "--down", "Download only, return path to image") do |d|
    options[:down] = d
  end

  opts.on("-g", "--gnome", "Set Gnome background") do |g|
    options[:gnome] = g
  end

  opts.on("-l", "--lock", "Set Gnome lock screen background") do |g|
    options[:lock] = g
  end

  opts.on("-f", "--feh", "Use feh to set the  background (the default)") do |f|
    options[:feh] = f
  end

  opts.on("-s", "--sway", "Use swaymsg to set the background, overwrite ~/.config/sway/config.d/wallpaper") do |s|
    options[:sway] = s
  end

  opts.on("-l", "--hypr", "Use Hyprpaper to set the  background") do |l|
    options[:hypr] = l
  end

  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end
end.parse!

# create an instance and set the wallpaper
bingImage = Bingwallpaper::Image.new

# bail out if we've already downloaded today's image
downloaded_data_path = bingImage.image_storage_path ".bingwallpaper"
if File.exist? downloaded_data_path

  downloaded_data = YAML.unsafe_load_file downloaded_data_path
  if downloaded_data[:downloaded] == Date.today

    logger.info "Image of the day already downloaded and set"
  end
end

begin

  # compute the URL for the image of the data data
  data_url = bingImage.get_data_url

  # parse image of the day data
  image_data = bingImage.parse_xml data_url

  # decide where we'll save today's image
  image_path = bingImage.image_storage_path image_data[0][:file_name]
  fallback_image_path = bingImage.image_storage_path image_data[0][:fallback_file_name]

  # path of the downloaded file
  downloaded_data = nil

  # try the hi-res image
  if !image_path.exist?

    begin

      bingImage.download_image image_path, image_data[0][:links][:url]
      downloaded_data = {
        :path => image_path,
        :quality => :high,
        :downloaded => Date.today
      }
    rescue Exception => exception
      logger.info "I couldn't download the hi-resolution image of the day..."
      logger.info "I couldn't load " + image_data[0][:links][:url]
    end
  end


  # fallback to the low-res image
  if !image_path.exist? && !fallback_image_path.exist?

    begin

      bingImage.download_image fallback_image_path, image_data[0][:links][:fallback_url]
      downloaded_data = {
        :path => fallback_image_path,
        :quality => :low,
        :downloaded => Date.today
      }
    rescue Exception => exception
      logger.info "I couldn't download the low-resolution image of the day..."
      logger.info "I couldn't load " + image_data[0][:links][:url]
    end
  end

  # update our downloaded data
  if downloaded_data
    File.open(downloaded_data_path, "w+") do |file_out|
      file_out.write YAML.dump(downloaded_data)
    end
  end

  # set the wallpaper
  if image_path.exist?

    # set the wallpaper
    logger.info "Wallpaper set to #{image_path}"

    if options[:down]
      logger.info "Downloading new background image only"
      puts(image_path)
    elsif options[:gnome]
      logger.info "Setting background with Gnome"
      `gsettings set org.gnome.desktop.background picture-uri "file:///#{image_path}"`
    elsif options[:sway]
      logger.info "Setting background with swaymsg"
      `swaymsg output "*" background #{image_path} fill`
      `echo 'exec swaymsg output "*" background #{image_path} fill' > ~/.config/sway/config.d/wallpaper`
    elsif options[:hypr]
      logger.info "Setting background with Hyprpaper"
      `hyprctl hyprpaper reload ,#{image_path}`
    else
      logger.info "Setting background with feh"
      `feh --bg-fill #{image_path}`
    end

    if options[:lock]
      logger.info "Setting lock background with Gnome"
      `gsettings set org.gnome.desktop.screensaver picture-uri "file:///#{image_path}"`
    end
  elsif fallback_image_path.exist?

    # set the wallpaper
    logger.info "Only the low-resolution image was available today."
    logger.info "Wallpaper set to #{image_path}"

    if options[:gnome]
      logger.info "Setting background with Gnome"
      `gsettings set org.gnome.desktop.background picture-uri "file:///#{fallback_image_path}"`
    elsif options[:sway]
      logger.info "Setting background with swaymsg"
      `swaymsg output "*" background #{fallback_image_path} fill`
      `echo 'exec swaymsg output "*" background #{fallback_image_path} fill' > ~/.config/sway/config.d/wallpaper`
    else
      logger.info "Setting background with feh"
      `feh --bg-fill #{fallback_image_path}`
    end

    if options[:lock]
      logger.info "Setting lock background with Gnome"
      `gsettings set org.gnome.desktop.screensaver picture-uri "file:///#{fallback_image_path}"`
    end
  else

    logger.info "Sorry, I couldn't download the Bing Image of the Day. :'("
  end
rescue Exception => exception
  logger.info "Sorry, I couldn't set today's Bing Image of the Day Wallpaper. :'("
  logger.error "The problems was: " + exception.message
  exit 1
end

exit 0
